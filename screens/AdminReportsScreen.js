import { Ionicons } from "@expo/vector-icons";

import { addDoc, collection, getDocs, Timestamp } from "firebase/firestore";
import { useEffect, useState } from "react";
import { Alert, ScrollView, StyleSheet, Text, TouchableOpacity, View } from "react-native";
import { auth, db } from "../firebase";

export default function AdminReportsScreen() {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const user = auth.currentUser;

  const loadReports = async () => {
    try {
      const snap = await getDocs(collection(db, "reports"));
      const data = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      setReports(data);
    } catch (err) {
      console.error("loadReports error:", err);
      Alert.alert("Error", "Failed to load reports.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadReports();
  }, []);

  const handleGenerate = async () => {
    try {
      const newReport = {
        title: "Monthly Appointment Report",
        date: new Date().toISOString().split("T")[0],
        size: "2.0 MB",
        createdAt: Timestamp.now(),
        createdBy: user?.email || "admin@vetplus.com",
      };
      await addDoc(collection(db, "reports"), newReport);
      Alert.alert("Success", "Report generated successfully!");
      loadReports();
    } catch (err) {
      console.error("generate report error:", err);
      Alert.alert("Error", "Failed to generate report.");
    }
  };

  const handleExport = async () => {
    try {
      if (reports.length === 0) { Alert.alert("No Reports", "There are no reports to export."); return; }

      const html = `
        <html>
          <head>
            <style>
              body { font-family: Arial; padding: 20px; }
              h1 { color: #00BFA6; text-align: center; }
              table { width: 100%; border-collapse: collapse; margin-top: 20px; }
              th, td { border: 1px solid #ccc; padding: 10px; text-align: left; }
              th { background-color: #E0F7F4; }
              tr:nth-child(even) { background-color: #f9f9f9; }
              footer { margin-top: 30px; text-align: center; font-size: 12px; color: #555; }
            </style>
          </head>
          <body>
            <h1>VetPlus | Appointment Reports</h1>
            <p><b>Generated by:</b> ${user?.email || "Admin (Clinic Administrator)"}</p>
            <table>
              <tr><th>Report Title</th><th>Date</th><th>Size</th></tr>
              ${reports.map(r => `<tr><td>${r.title}</td><td>${r.date}</td><td>${r.size}</td></tr>`).join("")}
            </table>
            <footer>¬© ${new Date().getFullYear()} VetPlus Animal Clinic</footer>
          </body>
        </html>
      `;

      const { uri } = await Print.printToFileAsync({ html });
      await Sharing.shareAsync(uri, { dialogTitle: "Share or Save Report PDF" });
    } catch (err) {
      console.error("export error:", err);
      Alert.alert("Error", "Failed to export reports.");
    }
  };

  if (loading) {
    return (
      <View style={styles.center}><Text>Loading reports...</Text></View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      {/* <View style={styles.header}>
        <Text style={styles.logo}>VetPlus | Animal Clinic</Text>
        
      </View> */}

      <View style={styles.content}>
        <Text style={styles.title}>Reports</Text>
        <Text style={styles.subtitle}>View and generate clinic reports</Text>

        <View style={styles.filterRow}>
          <Text style={styles.staticText}>Filter: This Month</Text>
          <TouchableOpacity style={styles.exportButton} onPress={handleExport}>
            <Ionicons name="download-outline" size={18} color="#fff" />
            <Text style={styles.exportText}>Export</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.card}>
          <Text style={styles.cardTitle}>üêæ Appointment Reports</Text>
          <Text style={styles.total}>Total: {reports.length} reports</Text>

          <View style={styles.reportList}>
            {reports.map((r) => (
              <View key={r.id} style={styles.reportItem}>
                <Text style={styles.reportTitle}>{r.title}</Text>
                <Text style={styles.reportDetails}>{r.date} ¬∑ {r.size}</Text>
                <TouchableOpacity onPress={() => Alert.alert("Download", `Downloading ${r.title}...`)}>
                  <Ionicons name="download-outline" size={18} color="#00BFA6" />
                </TouchableOpacity>
              </View>
            ))}
          </View>

          <TouchableOpacity style={styles.viewAllButton} onPress={() => Alert.alert("View All", "Viewing all reports...")}>
            <Text style={styles.viewAllText}>‚û°Ô∏è View All Appointment Reports</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.generateSection}>
          <Text style={styles.generateTitle}>üìä Generate Report</Text>
          <Text style={styles.generateLabel}>Create a custom appointment report.</Text>
          <Text style={styles.staticText}>Report Type: Appointment Reports | Time Frame: Monthly</Text>
          <TouchableOpacity style={styles.generateButton} onPress={handleGenerate}><Text style={styles.generateButtonText}>Generate</Text></TouchableOpacity>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  center: { flex: 1, justifyContent: "center", alignItems: "center" },
  container: { flex: 1, backgroundColor: "#fff" },
  header: { padding: 15, backgroundColor: "#E0F7F4", borderBottomWidth: 1, borderBottomColor: "#ccc" },
  logo: { fontSize: 20, fontWeight: "bold", color: "#00BFA6", textAlign: "center", marginBottom: 10 },
  userInfo: { flexDirection: "row", justifyContent: "space-between", alignItems: "center" },
  user: { fontSize: 14, color: "#333" },
  content: { padding: 20 },
  title: { fontSize: 24, fontWeight: "bold", color: "#00BFA6", marginBottom: 10 },
  subtitle: { fontSize: 16, color: "#666", marginBottom: 15 },
  filterRow: { flexDirection: "row", justifyContent: "space-between", marginBottom: 20 },
  staticText: { fontSize: 16, color: "#444", padding: 10, borderWidth: 1, borderColor: "#ddd", borderRadius: 5, width: "48%" },
  exportButton: { width: "48%", backgroundColor: "#00BFA6", padding: 12, borderRadius: 5, flexDirection: "row", justifyContent: "center", alignItems: "center" },
  exportText: { color: "#fff", fontSize: 16, fontWeight: "bold", marginLeft: 5 },
  card: { backgroundColor: "#E0F7F4", borderRadius: 10, padding: 15, marginBottom: 20 },
  cardTitle: { fontSize: 18, fontWeight: "600", color: "#333", marginBottom: 10 },
  total: { fontSize: 16, color: "#444", marginBottom: 15 },
  reportList: { marginBottom: 15 },
  reportItem: { flexDirection: "row", justifyContent: "space-between", paddingVertical: 10, borderBottomWidth: 1, borderBottomColor: "#ddd" },
  reportTitle: { fontSize: 16, color: "#333" },
  reportDetails: { fontSize: 14, color: "#666" },
  viewAllButton: { alignSelf: "flex-end" },
  viewAllText: { color: "#00BFA6", fontSize: 14, fontWeight: "bold" },
  generateSection: { marginTop: 20 },
  generateTitle: { fontSize: 18, fontWeight: "600", color: "#333", marginBottom: 10 },
  generateLabel: { fontSize: 14, color: "#666", marginBottom: 15 },
  generateButton: { backgroundColor: "#00BFA6", padding: 12, borderRadius: 5, alignItems: "center", marginTop: 10 },
  generateButtonText: { color: "#fff", fontSize: 16, fontWeight: "bold" },
});
